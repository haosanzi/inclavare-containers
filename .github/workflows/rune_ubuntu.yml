name: Inclavare Containers CI

# Controls when the action will run. Triggers the workflow on push or pull request
on: [workflow_dispatch]
    #  push:
    #branches:
    #- warm

env:
  occlum_version: 0.17.0
  nap_time: 60

jobs:
  rune_ubuntu:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v1
      with:
       submodules: true

    - name: Create container
      run: docker run -itd --privileged --rm --name=ubuntu --net host --device /dev/isgx -v /var/run/aesmd:/var/run/aesmd -v $GITHUB_WORKSPACE:/root/inclavare-containers occlum/occlum:${{ env.occlum_version }}-ubuntu18.04

    - name: Install dependencies
      run: docker exec ubuntu bash -c "apt-get update && apt-get install libseccomp-dev;
            cd /root && wget https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz;
            tar -zxvf /root/go1.14.2.linux-amd64.tar.gz -C /usr/lib;
            echo 'export GOROOT=/usr/lib/go' >> /etc/profile;
            echo 'export GOPATH=/root/gopath' >> /etc/profile;
            echo 'export PATH=$GOROOT/bin:$PATH:$GOPATH/bin' >> /etc/profile;
            echo 'export GOPROXY="https://mirrors.aliyun.com/goproxy,direct"' >>/etc/profile;
            echo 'export PKG_CONFIG_PATH=/usr/lib/pkgconfig' >>/etc/profile;
            echo 'export GO111MODULE=on' >>/etc/profile;
            source /etc/profile && go get github.com/golang/protobuf/protoc-gen-go@v1.3.5;"

    - name: Build and install rune
      run: docker exec ubuntu bash -c "cd /root;
            cp -r inclavare-containers inclavare-containers-0.5.0;
            tar zcf v0.5.0.tar.gz inclavare-containers-0.5.0;
            sed -i '17 d' /root/inclavare-containers-0.5.0/rune/dist/deb/build.sh;
            sed -i '17icp /root/v0.5.0.tar.gz \$DEBBUILD_DIR' /root/inclavare-containers-0.5.0/rune/dist/deb/build.sh;
            source /etc/profile && cd /root/inclavare-containers-0.5.0;
            sed -i "s#"0.4.1"#"0.5.0"#g" VERSION;
            chmod +x rune/dist/deb/build.sh && make package components=rune;
            dpkg -i rune_0.5.0-1_amd64.deb;"

    - name: Install and configure docker
      run: |
           docker exec ubuntu bash -c "apt-get install -y apt-transport-https ca-certificates curl software-properties-common;
            curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | apt-key add -;
            add-apt-repository 'deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic stable';
            apt-get update && apt-get install -y docker-ce;"

           docker exec ubuntu bash -c "mkdir /etc/docker; cat << EOF >/etc/docker/daemon.json
           { 
               \"runtimes\":{
                   \"rune\":{
                       \"path\":\"/usr/local/bin/rune\",
                       \"runtimeArgs\":[]
                     }
                 },
                 \"storage-driver\": \"vfs\"
            }
            EOF"

            docker exec ubuntu bash -c "sed -i -e '/EOF/d' /etc/docker/daemon.json; service docker start"

    - name: Build Occlum Application Image
      run: |
           docker exec ubuntu bash -c "cat << EOF >/root/hello_world.c
              "#include\<stdio.h\>"
              int main ()
              {
              printf(\"Hello World\n\");
              return 0;
              }
              EOF"

            docker exec ubuntu bash -c "sed -i -e '/EOF/d' /root/hello_world.c;
             occlum-gcc -o hello_world hello_world.c; occlum new occlum_instance && cd occlum_instance; 
             cp ../hello_world image/bin/ && occlum build;
             occlum package occlum_instance.tar.gz;"

             docker exec ubuntu bash -c "cat >/root/occlum_instance/Dockerfile <<EOF
             FROM centos:8.1.1911
             RUN mkdir -p /run/rune
             WORKDIR /run/rune
             ADD occlum_instance.tar.gz /run/rune
             ENTRYPOINT [\"/bin/hello_world\"]
             EOF"

             docker exec ubuntu bash -c "cd /root/occlum_instance;
              sed -i -e '/EOF/d' Dockerfile;
              docker build . -t occlum-app;"

    - name: Build skeleton image
      run: |
           docker exec ubuntu bash -c "apt-get install -y libprotobuf-c0-dev protobuf-compiler libprotoc-dev;
            wget https://github.com/protobuf-c/protobuf-c/archive/v1.3.1.tar.gz; tar -zxvf v1.3.1.tar.gz; 
            cd protobuf-c-1.3.1; ./autogen.sh;
            source /etc/profile; ./configure && make &&  make install;
            rm -rf ../v1.3.1.tar.gz; rm -rf ../protobuf-c-1.3.1;
            apt-get remove -y libprotobuf-dev; apt -y autoremove;
            cd /root/inclavare-containers/rune/libenclave/internal/runtime/pal/skeleton
            make && cp liberpal-skeleton-v*.so /usr/lib;
            cat >Dockerfile <<-EOF
            FROM centos:8.1.1911

            RUN mkdir -p /run/rune
            WORKDIR /run/rune

            COPY encl.bin .
            COPY encl.elf .
            COPY encl.ss .
            EOF"

            docker exec ubuntu bash -c "cd /root/inclavare-containers/rune/libenclave/internal/runtime/pal/skeleton;
             sed -i -e '/EOF/d' Dockerfile; 
             docker build . -t skeleton-enclave;"

    - name: Rune Occlum image
      run: docker exec ubuntu bash -c "source /etc/profile; docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/opt/occlum/build/lib/libocclum-pal.so -e ENCLAVE_RUNTIME_ARGS=occlum_instance occlum-app;"
    
    - name: Rune skeleton image
      run: docker exec ubuntu bash -c "source /etc/profile; docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/usr/lib/liberpal-skeleton-v2.so -e ENCLAVE_RUNTIME_ARGS=debug skeleton-enclave || true;"

    - name: Kill the container
      run: |
        sleep ${{ env.nap_time }};
        docker stop ubuntu
