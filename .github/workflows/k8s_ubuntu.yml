name: Runing containers on K8s (Manual Trigger)

# This is a manual trigger.
on: [workflow_dispatch]

env:
    WORK_DIR: /root/pkgs
    kubernetes_version: 1.16.9
jobs:
  k8s_ubuntu:
    runs-on: [self-hosted, ubuntu]
    steps:
    - uses: actions/checkout@v1

    - name: Prepare
      run: rm -rf $WORK_DIR;
        mkdir -p $WORK_DIR;

    - name: Install rune shim epm and sgx-tools
      run: cp -r $GITHUB_WORKSPACE $WORK_DIR;
        source /etc/profile;
        pushd $WORK_DIR;
        cp -r inclavare-containers inclavare-containers-0.5.0;
        tar zcf v0.5.0.tar.gz inclavare-containers-0.5.0;
        pushd inclavare-containers-0.5.0;
        sed -i "s#wget -P \$DEBBUILD_DIR \$RELEASE_TARBALL_URL#cp /root/v0.5.0.tar.gz \$DEBBUILD_DIR#g"  `grep wget -P \$DEBBUILD_DIR \$RELEASE_TARBALL_URL -rl`;
        chmod +x rune/dist/deb/build.sh && make package components;
        dpkg -i *.deb
        popd;
        popd;

    - name: Install containerd
      run: |
        pushd $WORK_DIR;
        curl -LO http://aliacs-edge-k8s-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/jiazhuo/containerd-1.3.4.linux-amd64.tar.gz;
        tar -xvf containerd-1.3.4.linux-amd64.tar.gz;
        cp bin/* /usr/local/bin
        popd;

        cat <<- EOF >/etc/systemd/system/containerd.service
        [Unit]
        Description=containerd container runtime
        Documentation=https://containerd.io
        After=network.target

        [Service]
        ExecStartPre=/sbin/modprobe overlay
        ExecStart=/usr/local/bin/containerd
        Restart=always
        RestartSec=5
        Delegate=yes
        KillMode=process
        OOMScoreAdjust=-999
        LimitNOFILE=1048576
        LimitNPROC=infinity
        LimitCORE=infinity

        [Install]
        WantedBy=multi-user.target
        EOF

        cat <<- EOF >/etc/containerd/config.toml
        [plugins]
          [plugins.cri]
            sandbox_image = "registry.cn-hangzhou.aliyuncs.com/acs/pause-amd64:3.1"
            [plugins.cri.containerd]
              default_runtime_name = "rune"
              snapshotter = "overlayfs"
              [plugins.cri.containerd.runtimes.rune]
                runtime_type = "io.containerd.rune.v2"
        EOF

        systemctl enable containerd.service;
        systemctl restart containerd.service;


    - name: Install kubernetes
      run: |
        modprobe br_netfilter;

        cat <<- EOF | tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
        EOF

        sysctl --system
        apt update && sudo apt install -y apt-transport-https curl
        curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -
        echo "deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main" >>/etc/apt/sources.list.d/kubernetes.list
        sudo setenforce 0 || true
        apt update && apt install -y kubelet=$kubernetes_version-00 \
        kubeadm=$kubernetes_version-00 kubectl=$kubernetes_version-00

        cat <<- EOF >/etc/resolv.conf.kubernetes
        nameserver 8.8.8.8
        options timeout:2 attempts:3 rotate single-request-reopen
        EOF

        cat <<- EOF >/etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        # Note: This dropin only works with kubeadm and kubelet v1.11+
        [Service]
        Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
        Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
        Environment="KUBELET_SYSTEM_PODS_ARGS=--max-pods 64 --pod-manifest-path=/etc/kubernetes/manifests"
        Environment="KUBELET_NETWORK_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin"
        Environment="KUBELET_DNS_ARGS=--pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/acs/pause-amd64:3.0 --cluster-domain=cluster.local --cloud-provider=external --resolv-conf=/etc/resolv.conf.kubernetes"
        Environment="KUBELET_EXTRA_ARGS=--container-runtime=remote --container-runtime-endpoint=/run/containerd/containerd.sock"
        ExecStart=
        ExecStart=/usr/bin/kubelet \$KUBELET_KUBECONFIG_ARGS \$KUBELET_CONFIG_ARGS \$KUBELET_SYSTEM_PODS_ARGS \$KUBELET_NETWORK_ARGS \$KUBELET_DNS_ARGS \$KUBELET_EXTRA_ARGS
        EOF

        systemctl enable kubelet.service

        if [ -f /etc/kubernetes/admin.conf ]; then
          echo y | kubeadm reset
        fi
        systemctl enable kubelet.service
        kubeadm init --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers --kubernetes-version=v1.16.9 --pod-network-cidr="172.21.0.0/20" --service-cidr="172.20.0.0/20"

        mkdir -p $HOME/.kube
        sudo /bin/cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
        sudo chown $(id -u):$(id -g) $HOME/.kube/config
        kubectl taint nodes $(hostname | tr 'A-Z' 'a-z') node.cloudprovider.kubernetes.io/uninitialized-
        kubectl taint nodes $(hostname | tr 'A-Z' 'a-z') node-role.kubernetes.io/master-
        wget https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml
        kubectl apply -f kube-flannel.yml --validate=false

    - name: Install runtimeclass
      run: |
        cat <<- EOF | kubectl apply -f -
        apiVersion: node.k8s.io/v1beta1
        handler: rune
        kind: RuntimeClass
        metadata:
          name: rune
        EOF

        kubectl get runtimeclass

    - name: Run Occlum-hello
      run: |
        cat <<- EOF | kubectl apply --validate=false -f -
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            run: helloworld
          name: helloworld
        spec:
          runtimeClassName: rune
          containers:
          - command:
            - /bin/hello_world
            env:
            - name: RUNE_CARRIER
              value: occlum
            image: docker.io/inclavarecontainers/occlum-hello-world:scratch
            imagePullPolicy: IfNotPresent
            name: helloworld
           workingDir: /run/rune
        EOF

        kubectl get pod helloworld;
        kubectl logs -f helloworld;

    - name: Clean the workspace
      run: echo "need to add the steps to clean the workspace!"
