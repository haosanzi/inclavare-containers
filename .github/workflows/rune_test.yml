name: Run rune with docker test

# Controls when the action will run. Triggers the workflow on push or pull request
on: [push, pull_request]

jobs:
  rune_ubuntu:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v1

    - name: Get Occlum version
      run: wget https://raw.githubusercontent.com/occlum/occlum/master/src/pal/include/occlum_version.h;
        echo "OCCLUM_VERSION=$(grep 'Version =' occlum_version.h | awk '{print $4}')" >> $GITHUB_ENV;
        echo "RUNE_VERSION=$(grep 'Version:' rune/dist/rpm/rune.spec | awk '{print $2}')" >> $GITHUB_ENV

    - name: Create container
      run: docker rm -f ubuntu || true;
        docker run -itd --privileged --rm --name=ubuntu --net host --device /dev/isgx -v /var/run/aesmd:/var/run/aesmd -v $GITHUB_WORKSPACE:/root/inclavare-containers occlum/occlum:$OCCLUM_VERSION-ubuntu18.04

    - name: Install dependencies
      run: docker exec ubuntu bash -c "apt-get update;
        apt-get install libseccomp-dev;
        cd /root && wget https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz;
        tar -zxvf /root/go1.14.2.linux-amd64.tar.gz -C /usr/lib;
        echo 'export GOROOT=/usr/lib/go' >> /etc/profile;
        echo 'export GOPATH=/root/gopath' >> /etc/profile;
        echo 'export PATH=$GOROOT/bin:$PATH:$GOPATH/bin' >> /etc/profile;
        echo 'export GOPROXY="https://mirrors.aliyun.com/goproxy,direct"' >>/etc/profile;
        echo 'export PKG_CONFIG_PATH=/usr/lib/pkgconfig' >>/etc/profile;
        echo 'export GO111MODULE=on' >>/etc/profile;
        source /etc/profile;
        go get github.com/golang/protobuf/protoc-gen-go@v1.3.5"

    - name: Build and install rune
      run: docker exec ubuntu bash -c "cd /root;
        cp -r inclavare-containers inclavare-containers-$RUNE_VERSION;
        tar zcf v$RUNE_VERSION.tar.gz inclavare-containers-$RUNE_VERSION;
        pushd /root/inclavare-containers-$RUNE_VERSION;
        echo "$RUNE_VERSION" > VERSION;
        sed -i '17 d' rune/dist/deb/build.sh;
        sed -i '17icp /root/v*.tar.gz \$DEBBUILD_DIR' rune/dist/deb/build.sh;
        source /etc/profile;
        chmod +x rune/dist/deb/build.sh && make package components=rune;
        dpkg -i rune_$RUNE_VERSION-1_amd64.deb;
        popd"

    - name: Install and configure docker
      run: |
        docker exec ubuntu bash -c "apt-get install -y apt-transport-https ca-certificates curl software-properties-common;
        curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | apt-key add -;
        add-apt-repository 'deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic stable';
        apt-get update && apt-get install -y docker-ce"

        docker exec ubuntu bash -c "mkdir /etc/docker;
        cat <<- EOF >/etc/docker/daemon.json
        {
            \"runtimes\":{
                \"rune\":{
                    \"path\":\"/usr/local/bin/rune\",
                    \"runtimeArgs\":[]
                  }
              },
              \"storage-driver\": \"vfs\"
        }
        EOF"

        docker exec ubuntu bash -c "service docker start"

    - name: Build Occlum Application Image
      run: |
        docker exec ubuntu bash -c "cat <<- EOF >/root/hello_world.c
        "#include\<stdio.h\>"
        int main ()
        {
            printf(\"Hello World\n\");
            return 0;
        }
        EOF"

        docker exec ubuntu bash -c "occlum-gcc -o hello_world hello_world.c;
        occlum new occlum_instance && cd occlum_instance;
        cp ../hello_world image/bin/ && occlum build;
        occlum package occlum_instance.tar.gz"

        docker exec ubuntu bash -c "cat <<- EOF >/root/occlum_instance/Dockerfile
        FROM centos:8.1.1911
        RUN mkdir -p /run/rune
        WORKDIR /run/rune
        ADD occlum_instance.tar.gz /run/rune
        ENTRYPOINT [\"/bin/hello_world\"]
        EOF"

        docker exec ubuntu bash -c "cd /root/occlum_instance;
        docker build . -t occlum-app"

    - name: Build skeleton image
      run: |
        docker exec ubuntu bash -c "apt-get install -y libprotoc-dev;
        wget https://github.com/protobuf-c/protobuf-c/archive/v1.3.1.tar.gz; tar -zxvf v1.3.1.tar.gz;
        cd protobuf-c-1.3.1; ./autogen.sh;
        source /etc/profile; ./configure && make && make install;
        apt-get remove -y libprotobuf-dev; apt -y autoremove;
        cd /root/inclavare-containers/rune/libenclave/internal/runtime/pal/skeleton
        make && cp liberpal-skeleton-v*.so /usr/lib;
        cat >Dockerfile <<-EOF
        FROM centos:8.1.1911

        RUN mkdir -p /run/rune
        WORKDIR /run/rune

        COPY encl.bin .
        COPY encl.elf .
        COPY encl.ss .
        EOF"

        docker exec ubuntu bash -c "cd /root/inclavare-containers/rune/libenclave/internal/runtime/pal/skeleton;
        docker build . -t skeleton-enclave"

    - name: Rune Occlum image
      run: docker exec ubuntu bash -c "docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/opt/occlum/build/lib/libocclum-pal.so -e ENCLAVE_RUNTIME_ARGS=occlum_instance occlum-app;"

    - name: Rune skeleton image
      run: docker exec ubuntu bash -c "source /etc/profile; docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/usr/lib/liberpal-skeleton-v2.so -e ENCLAVE_RUNTIME_ARGS=debug skeleton-enclave || true"

    - name: Kill the container
      run: docker stop ubuntu

  rune_centos:
    needs: rune_ubuntu
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v1

    - name: Get version
      run: echo "RUNE_VERSION=$(grep 'Version:' rune/dist/rpm/rune.spec | awk '{print $2}')" >> $GITHUB_ENV;

    - name: Create centos container
      run: docker rm -f centos || true;
        docker run -itd --privileged --name=centos --net host --device /dev/isgx -v /var/run/aesmd:/var/run/aesmd -v $GITHUB_WORKSPACE:/root/inclavare-containers crictl-occlum:centos8.1

    - name: Install dependencies
      run: docker exec centos bash -c "yum install -y libseccomp-devel;
        cd /root && wget -q https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz;
        tar -zxf /root/go1.14.2.linux-amd64.tar.gz -C /usr/lib;
        echo 'export GOROOT=/usr/lib/go' >> /etc/profile;
        echo 'export GOPATH=/root/gopath' >> /etc/profile;
        echo 'export PATH=$GOROOT/bin:$PATH:$GOPATH/bin' >> /etc/profile;
        echo 'export GOPROXY="https://mirrors.aliyun.com/goproxy,direct"' >>/etc/profile;
        echo 'export GO111MODULE=on' >>/etc/profile;
        source /etc/profile && go get github.com/golang/protobuf/protoc-gen-go@v1.3.5;"

    - name: Build and install rune
      run: docker exec centos bash -c "cd /root;
        cp -r inclavare-containers inclavare-containers-$RUNE_VERSION;
        tar zcf v$RUNE_VERSION.tar.gz inclavare-containers-$RUNE_VERSION;
        source /etc/profile && cd /root/inclavare-containers-$RUNE_VERSION;
        mkdir -p /root/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS};
        cp /root/v$RUNE_VERSION.tar.gz /root/rpmbuild/SOURCES/;
        pushd /root/inclavare-containers-$RUNE_VERSION;
        sed -i '16 d' rune/dist/Makefile;
        make package components=rune  RPMBUILD_DIR=/root/rpmbuild RELEASE_TARBALL_FILE=/root/rpmbuild/SOURCES/v$RUNE_VERSION.tar.gz RELEASE_TARBALL_EXIST=y;
        sed -i "/Version/a\Version:$RUNE_VERSION" shim/dist/rpm/shim-rune.spec;
        sed -i '11 d' shim/dist/rpm/shim-rune.spec;
        make package components=shim  RPMBUILD_DIR=/root/rpmbuild RELEASE_TARBALL_FILE=/root/rpmbuild/SOURCES/v$RUNE_VERSION.tar.gz RELEASE_TARBALL_EXIST=y;
        rpm -ivh rune-$RUNE_VERSION-1.el8.x86_64.rpm;
        rpm -ivh shim-rune-$RUNE_VERSION-1.el8.x86_64.rpm"

    - name: Build Occlum application image
      run: docker exec centos bash -c "dockerd -b docker0 --storage-driver=vfs &"

        docker exec centos bash -c "occlum-gcc -o hello_world hello_world.c;
        occlum new occlum_instance && cd occlum_instance;
        cp ../hello_world image/bin/ && occlum build;
        occlum package occlum_instance.tar.gz;
        cp /root/Dockerfile /root/occlum_instance;
        docker build . -t occlum-app"

    - name: Build skeleton image
      run: |
        docker exec centos bash -c "dnf --enablerepo=PowerTools install -y protobuf-devel protobuf-c-devel;
        cd /root/inclavare-containers/rune/libenclave/internal/runtime/pal/skeleton;
        make && cp liberpal-skeleton-v*.so /usr/lib;
        cat >Dockerfile <<-EOF
        FROM centos:8.1.1911

        RUN mkdir -p /run/rune
        WORKDIR /run/rune

        COPY encl.bin .
        COPY encl.elf .
        COPY encl.ss .
        EOF"

        docker exec centos bash -c "cd /root/inclavare-containers/rune/libenclave/internal/runtime/pal/skeleton;
        docker build . -t skeleton-enclave"

    - name: Rune Occlum image
      run: docker exec centos bash -c "source /etc/profile; docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/opt/occlum/build/lib/libocclum-pal.so -e ENCLAVE_RUNTIME_ARGS=occlum_instance occlum-app"

    - name: Rune skeleton image
      run: docker exec centos bash -c "source /etc/profile; docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/usr/lib/liberpal-skeleton-v2.so -e ENCLAVE_RUNTIME_ARGS=debug skeleton-enclave || true"

    - name: Run occlum-hello pod
      run: docker exec centos bash -c "containerd" &

        docker exec centos bash -c "cd /root/samples && ./clean.sh;
        crictl run --timeout 3s hello.yaml pod.yaml && ./show.sh"

    - name: Run dragonwell-web pod
      run: docker exec centos bash -c "cd /root/samples && ./clean.sh;
        crictl run --timeout 3s dragonwell.yaml pod.yaml && ./show.sh"

    - name: Run openjdk-web pod
      run: docker exec centos bash -c "cd /root/samples && ./clean.sh;
        crictl run --timeout 3s jdk.yaml pod.yaml && ./show.sh"

    - name: Run golang-web pod
      run: docker exec centos bash -c "cd /root/samples && ./clean.sh;
        crictl run --timeout 3s golang.yaml pod.yaml && ./show.sh"

    - name: Kill the container
      run: docker stop centos
