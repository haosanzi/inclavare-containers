name: Run rune on centos with docker and crictl test

# Controls when the action will run. Triggers the workflow on pull request labeled testing-before-checkin.
on:
  pull_request_target:
    types: labeled

jobs:
  rune_centos:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'testing-before-checkin') }}
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v1

    - name: Get version
      run: echo "RUNE_VERSION=$(grep 'Version:' rune/dist/rpm/rune.spec | awk '{print $2}')" >> $GITHUB_ENV;
        echo "CPU_NUM=$(grep 'processor' /proc/cpuinfo | sort -u | wc -l)" >> $GITHUB_ENV

    - name: Create centos container
      run: |
        centos=$(docker run -itd --privileged --net host --device /dev/isgx -v $GITHUB_WORKSPACE:/root/inclavare-containers crictl-occlum:centos8.1)
        echo "centos=$centos" >> $GITHUB_ENV

    - name: Install dependencies on centos
      run: docker exec $centos bash -c "yum install -y libseccomp-devel;
        cd /root && wget -q https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz;
        tar -zxf /root/go1.14.2.linux-amd64.tar.gz -C /usr/lib;
        echo 'export GOROOT=/usr/lib/go' >> /etc/profile;
        echo 'export GOPATH=/root/gopath' >> /etc/profile;
        echo 'export PATH=\$GOROOT/bin:\$PATH:\$GOPATH/bin' >> /etc/profile;
        echo 'export GOPROXY="https://mirrors.aliyun.com/goproxy,direct"' >>/etc/profile;
        echo 'export GO111MODULE=on' >>/etc/profile"

    - name: Build and install rune and shim-rune rpm
      run: docker exec $centos bash -c "cd /root && source /etc/profile;
        cp -r inclavare-containers inclavare-containers-$RUNE_VERSION;
        tar zcf v$RUNE_VERSION.tar.gz inclavare-containers-$RUNE_VERSION;
        cd /root/inclavare-containers-$RUNE_VERSION;
        mkdir -p /root/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS};
        cp /root/v$RUNE_VERSION.tar.gz /root/rpmbuild/SOURCES/;
        echo "$RUNE_VERSION" > VERSION;
        find ./ -path "*dist/Makefile" | xargs -I files sed -i '16 d' files;
        make package RPMBUILD_DIR=/root/rpmbuild RELEASE_TARBALL_FILE=/root/rpmbuild/SOURCES/v$RUNE_VERSION.tar.gz RELEASE_TARBALL_EXIST=y -j${CPU_NUM};
        rpm -ivh rune-$RUNE_VERSION-1.el8.x86_64.rpm;
        rpm -ivh shim-rune-$RUNE_VERSION-1.el8.x86_64.rpm;
        rpm -ivh sgx-tools-$RUNE_VERSION-1.el8.x86_64.rpm"

    - name: Build skeleton image on centos
      run: |
        docker exec $centos bash -c "dnf --enablerepo=PowerTools install -y binutils-devel protobuf-devel protobuf-c-devel;
        cd /root/inclavare-containers/rune/libenclave/internal/runtime/pal/skeleton;
        make -j${CPU_NUM} && cp liberpal-skeleton-v*.so /usr/lib;
        cat >Dockerfile <<-EOF
        FROM scratch

        COPY encl.bin /
        COPY encl.ss /

        ENTRYPOINT [\"dummy\"]
        EOF"

        docker exec $centos bash -c "cd /root/inclavare-containers/rune/libenclave/internal/runtime/pal/skeleton;
        docker build . -t skeleton-enclave"

    - name: Create skeleton bundle on centos
      if: always()
      run: docker exec $centos bash -c "mkdir rootfs;
        docker create --name skeleton-enclave skeleton-enclave;
        docker export skeleton-enclave | tar -C rootfs -xvf -;
        cp /etc/resolv.conf rootfs/etc/resolv.conf"

    - name: Run skeleton v2 bundle on centos
      if: always()
      run: |
        docker exec $centos bash -c "mkdir -p /var/run/rune;
        cp /usr/lib/liberpal-skeleton-v2.so /var/run/rune/liberpal-skeleton-v2.so;
        rune spec;
        sed -i '4 c \"terminal\": false,' config.json;
        sed -i '16 c \"cwd\": \"\/\",' config.json;
        rune --debug run ra"

    - name: Generate skeleton ra config.json on centos
      if: always()
      run: | 
        docker exec $centos bash -c "sed -i '161,163d' config.json;
        sed -i 's/\/var\/run\/rune\/liberpal-skeleton-v2.so/\/usr\/lib\/liberpal-skeleton-v3.so/g' config.json;
        sed -i '10 c  \"sh\",\"wait_timeout\",\"6000\"' config.json;
        sed -i '144 a \"enclave.attestation.ra_epid_is_linkable\": \"false\",' config.json;
        sed -i '144 a \"enclave.attestation.ra_epid_subscription_key\": \"${{ secrets.SUB_KEY }}\",' config.json;
        sed -i '144 a \"enclave.attestation.ra_epid_spid\": \"${{ secrets.SPID }}\",' config.json;
        sed -i '144 a \"enclave.attestation.ra_type\":\"EPID\",' config.json"

    - name: Run skeleton v3 bundle on centos
      if: always()
      run: docker exec $centos bash -c "rune --debug run skeleton-enclave-container" &

    - name: Get remote report with rune attest command with skeleton on centos
      if: always()
      run: docker exec $centos bash -c "sleep 10;
        rune --debug attest --isRA --linkable=false --spid=${{ secrets.SPID }} --subscription-key=${{ secrets.SUB_KEY }} skeleton-enclave-container"

    - name: Get local report with rune attest command with skeleton on centos
      if: always()
      run: docker exec $centos bash -c "rune --debug attest --reportFile=/report.bin skeleton-enclave-container"

    - name: Kill the container
      if: always()
      run: docker stop $centos
